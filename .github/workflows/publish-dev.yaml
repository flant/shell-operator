name: Publish dev image
on:
  pull_request:
    types: [labeled]
env:
  GO111MODULE: on
  # build only 2 platforms to speed up dev image build
  # TODO create pre-release build label!
  QEMU_PLATFORMS: arm64
  BUILDX_PLATFORMS: "linux/amd64,linux/arm64"
  IMAGE_REPO: flant/shell-operator-dev

jobs:
  stub:
    name: Empty job to prevent workflow fail
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id != 1838515600 # not ':robot: build dev images' label
    steps:
      - name: stub action
        run: ": This job is used to prevent the workflow to fail when all other jobs are skipped."
#      - name: dump label event
#        run: cat $GITHUB_EVENT_PATH
#      - name: dump envs
#        run: export

  unlabel:
    name: Unlabel
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id == 1838515600 # ':robot: build dev images' label
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const eventLabelName = '${{github.event.label.name}}'
            const response = await github.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            for (const label of response.data) {
              if (label.name === eventLabelName) {
                github.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: eventLabelName
                })
                break
              }
            }

  build_dev_image:
    name: Dev image
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.label.id == 1838515600 # ':robot: build dev images' label
    steps:
      - uses: actions/checkout@v2

      - name: Prepare environment
        env:
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          # dev-feat_branch-371e2d3b-2020.02.06_18:37:42
          APP_VERSION=dev-$GITHUB_HEAD_REF-${HEAD_SHA::8}-$(date +'%Y.%m.%d_%H:%M:%S')

          # This step is close to release-build.yaml to emulate release build.
          GITHUB_REF="refs/tags/latest"

          : Setup imageTag, appVersion and dockerFile envs and build image
          imageTag=${GITHUB_REF#refs/tags/}
          APP_VERSION=${imageTag}
          FINAL_IMAGE_NAME="${IMAGE_REPO}:${imageTag}"

          echo "FINAL_IMAGE_NAME=${FINAL_IMAGE_NAME}" >> ${GITHUB_ENV}
          echo "APP_VERSION=${APP_VERSION}" >> ${GITHUB_ENV}

          echo "========================================="
          echo "APP_VERSION        = $APP_VERSION"
          echo "FINAL_IMAGE_NAME   = $FINAL_IMAGE_NAME"
          echo "========================================="

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: "${{ process.env.QEMU_PLATFORMS }}"

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: BuildX info
        if: matrix.ref == 'refs/heads/master'
        run: |
          echo Builder instance name
          echo ${{ steps.buildx.outputs.name }}
          echo Available platforms
          echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push multi-arch image
        run: |
          echo "Build $FINAL_IMAGE_NAME with version '$APP_VERSION'"
          docker buildx build --push \
              --platform $BUILDX_PLATFORMS \
              --build-arg appVersion=$APP_VERSION \
              --tag $FINAL_IMAGE_NAME .

