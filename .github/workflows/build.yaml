# every push to a branch: build binary
name: Build
on:
  push:
    branches:
jobs:
  build_linux_binary:
    name: Build shell-operator binary
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        id: go

      - name: Check out shell-operator code
        uses: actions/checkout@v2

      # Restore go_modules.tar.gz from cache or download and pack them, upload archive as artifact for other jobs.
      # NOTE: cache action is limited to 400Mb artifacts and has a 2Gb space.
      # As of December 2019, go_modules.tar.gz is 281Mb
      - name: Cache go modules archive
        id: go-modules-cache
        uses: actions/cache@v2.1.4
        with:
          path: gomod
          key: ${{ runner.os }}-gomod-${{ hashFiles('go.mod') }}
          restore-keys: |
            ${{ runner.os }}-gomod-

      - name: Download and pack Go modules
        if: steps.go-modules-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p gomod
          go mod download
          tar -czf gomod/go_modules.tar.gz -C $HOME/go/pkg/mod .
          echo -n "Unpacked size is: " && du -sh $HOME/go/pkg/mod
          echo -n "Packed size is: " && du -sh gomod/go_modules.tar.gz

      - name: Unpack go modules
        if: steps.go-modules-cache.outputs.cache-hit == 'true'
        run: |
          mkdir -p $HOME/go/pkg/mod && tar -xzf gomod/go_modules.tar.gz -C $HOME/go/pkg/mod

      # Restore libjq-go-build directory from cache or build it, upload it as artifact for other jobs.
      - name: Extract libjq-go.lock from go.mod
        run: |
          go list -m github.com/flant/libjq-go | tee > libjq-go.lock

      - name: Cache libjq libraries
        id: libjq-cache
        uses: actions/cache@v2.1.4
        with:
          path: libjq
          key: ${{ runner.os }}-libjq-${{ hashFiles('libjq-go.lock') }}

      - name: Build libjq libraries
        if: steps.libjq-cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y git ca-certificates tree

          git clone https://github.com/flant/libjq-go libjq-go
          cd libjq-go
          git submodule update --init --recursive
          sudo ./scripts/install-libjq-dependencies-ubuntu.sh

          ./scripts/build-libjq-static.sh ${GITHUB_WORKSPACE}/libjq-go ${GITHUB_WORKSPACE}/libjq

          tree  ${GITHUB_WORKSPACE}/libjq

      - name: Prepare environment
        run: |
          echo ::set-env name=CGO_ENABLED::1

          CGO_CFLAGS="-I$GITHUB_WORKSPACE/libjq/include"
          echo ::set-env name=CGO_CFLAGS::${CGO_CFLAGS}

          CGO_LDFLAGS="-L$GITHUB_WORKSPACE/libjq/lib"
          echo ::set-env name=CGO_LDFLAGS::${CGO_LDFLAGS}

          echo ::set-env name=GOOS::linux

      - name: Build binary
        run: |
          go build ./cmd/shell-operator

# MacOS build works fine because jq package already has static libraries.
# Windows build requires jq compilation, this should be done in libjq-go.
# TODO Does cross-compile can help here?
#
#  build_darwin_binary:
#    name: Darwin binary
#    runs-on: macos-10.15
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: install jq
#        run: |
#          brew install jq
#
#      - name: build shell-operator binary
#        run: |
#          GO111MODULE=on \
#          CGO_ENABLED=1 \
#          go build ./cmd/shell-operator
#
#          file ./shell-operator
#
#          ./shell-operator version
#
#  build_windows_binary:
#    name: Windows binary
#    runs-on: windows-2019
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: build shell-operator binary
#        run: |
#          GO111MODULE=on \
#          CGO_ENABLED=1 \
#          go build ./cmd/shell-operator
#
#          ls -la .
#
#          ./shell-operator.exe version
#        shell: bash
