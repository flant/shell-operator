#!/bin/bash

function error_log(){
   echo "$(date) $1"
   exit 1
}

function get_resources(){
  rawPath=$1
  kubectl get --raw "$rawPath" | jq -r '.resources[] | select(.name | contains("/") | not)'
}

function print_group(){
  group=$1
  groupVersion=$2

  cat <<EOF
	{
		GroupVersion: "v1",
		APIResources: []metav1.APIResource{
EOF
  for resource in $(echo "$group" | jq -c '.') ; do
    kind=$(echo "$resource" | jq -r '.kind')
    namespaced=$(echo "$resource" | jq -r '.namespaced')
    name=$(echo "$resource" | jq -r '.name')
    version=$(echo "$resource" | jq -r '.version // "v1"')
    verbs=$(echo "$resource" | jq -rc '.verbs' | tail -c +2 | head -c -2)

    cat <<EOF
            {
                    Kind:    "${kind}",
                    Name:    "${name}",
                    Verbs:   metav1.Verbs{${verbs}},
                    Group:   "",
                    Version: "${version}",
                    Namespaced: ${namespaced},
            },
EOF
  done
      cat <<EOF
		},
	},
EOF
}

if ! jq --version >> /dev/null ; then
  error_log "jq package must be installed to run the generator"
fi
if ! kubectl version >> /dev/null ; then
  error_log 'kubectl must be installed and must be allowed to connect to kube-apiserver'
fi

mapfile -t api_versions < <(kubectl get --raw /apis | jq -r '.groups[].preferredVersion.groupVersion')
mapfile -t namespaces < <(kubectl get ns --no-headers | awk '{print $1}')

cat <<EOF
package main

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

var ClusterResources = []*metav1.APIResourceList{
EOF
resources=$(get_resources /api/v1)
print_group "$resources" "v1"

for path in "${api_versions[@]}"; do
  resources=$(get_resources /apis/${path})
  print_group "$resources" "$path"
done
echo '}'
